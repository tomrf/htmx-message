{
    "name": "tomrf/htmx-message",
    "type": "library",
    "description": "PHP PSR-7 proxy classes with convenience methods for htmx requests and responses",
    "keywords": [ "htmx", "http-message", "psr-7", "server-request", "http-request", "http-response" ],
    "homepage": "http://github.com/tomrf/htmx-message",
    "license": "MIT",
    "authors": [
        {
            "name": "Tom Rune Flo",
            "email": "tom@x86.no",
            "homepage": "http://github.com/tomrf/"
        }
    ],
    "extra": {
        "intro": [
            "PSR-7 `ServerRequestInterface` and `ResponseInterface` proxy classes for [`htmx`](htmx.org)",
            "with convenience methods for all special htmx headers (`HX-*`) in request and",
            "response objects.",
            "",
            "`HtmxResponse` is a proxy for PSR-7 response objects implementing `\\Psr\\Http\\Message\\ResponseInterface`.",
            "",
            "`HtmxServerRequest` is a proxy for PSR-7 server request objects implementing `\\Psr\\Http\\Message\\ServerRequestInterface.",
            "",
            "You can safely wrap any `ResponseInterface` or `ServerRequestInterface` object, also those not originating from htmx, without affecting your application.",
            "`HtmxResponse` and `HtmxServerRequest` objects retains immutability in the same fashion as one would expect from a PSR-7 `MessageInterface`, returning a new object wrapping a new `ResponseInterface` instance whenever the `HtmxResponse` is changed.",
            "HtmxServerRequest objects retains immutability in the same fashion as one would expect from a PSR-7 MessageInterface, returning a new object wrapping a new ServerRequestInterface instance whenever the HtmxServerRequest is changed."
        ],
        "example": [
            "$request = new HtmxRequest($request);     // PSR-7 `ServerRequestInterface`",
            "",
            "if ($request->isHxRequest() && $request->isHxBoosted()) {",
            "    $layout = 'ajax.layout';",
            "}",
            "",
            "[...]",
            "",
            "$response = new HtmxResponse($response);  // PSR-7 `ResponseInterface`",
            "",
            "$response = $response->withHxTrigger('aSimpleTrigger')",
            "    ->withAddedHxTrigger('triggerWithParams', ['arg' => true, 'arg2' => 7])",
            "    ->withTriggerAfterSwap('afterSwap', time())",
            "    ->withHxPush($newUrl);",
            "",
            "// Emit $response as normal",
            "[...]"
        ]
    },
    "require": {
        "php": "^8.0",
        "psr/http-message": "^1.0"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "phpstan/phpstan": "^1.6",
        "friendsofphp/php-cs-fixer": "^3.8",
        "phpmd/phpmd": "^2.12",
        "bmitch/churn-php": "^1.7",
        "roave/security-advisories": "dev-latest",
        "nyholm/psr7-server": "^1.0",
        "nyholm/psr7": "^1.5",
        "tomrf/http-emitter": "^0.0",
        "tomrf/readme-gen": "^0.0"
    },
    "autoload": {
        "psr-4": {
            "Tomrf\\HtmxMessage\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tomrf\\HtmxMessage\\Test\\": "tests/"
        }
    },
    "scripts": {
        "phpunit": [
            "phpunit -c .phpunit.dist.xml --colors=auto --coverage-text --stderr"
        ],
        "cs-fixer": [
            "php-cs-fixer fix --allow-risky=yes --diff --verbose src/"
        ],
        "phpstan": [
            "phpstan analyze --level max src/"
        ],
        "phpmd": [
            "phpmd src/ ansi .phpmd-ruleset.xml"
        ],
        "churn": [
            "churn run src/ | tail -n +7"
        ],
        "test": [
            "@phpunit",
            "@phpmd",
            "@phpstan",
            "@churn"
        ],
        "coverage": [
            "@putenv XDEBUG_MODE=coverage",
            "@phpunit --coverage-xml .phpunit.cache/code-coverage/xml",
            "ls -al .phpunit.cache/code-coverage/xml"

        ],
        "coverage-html": [
            "@putenv XDEBUG_MODE=coverage",
            "@phpunit --coverage-html .phpunit.cache/code-coverage/html",
            "php -S localhost:0 -t .phpunit.cache/code-coverage/html"
        ],
        "clean": [
            "rm -rf vendor/ .phpunit.cache .php-cs-fixer.cache"
        ],
        "readme": [
            "readme-gen ./ ./.readme.template.md"
        ]
    }
}
